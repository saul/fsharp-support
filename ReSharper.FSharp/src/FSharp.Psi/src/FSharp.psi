options {
  parserPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Gen";
  parserClassName="FSharpParserGenerated";
  psiInterfacePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  psiStubsPackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  psiStubsBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  tokenClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpToken";
  tokenTypePackageName="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing";
  tokenTypeClassName="FSharpTokenType";
  parserTargetSubdir="Parsing/FSharp";
  psiInterfacesTargetSubdir="Psi/FSharp";
  psiStubsTargetSubdir="Psi/FSharp/Impl";
  elementTypePrefix="";
  visitorClassName="TreeNodeVisitor";
  visitorMethodSuffix="";
  disableReflection;
  separateHierarchies;
  acceptModifier="";
  visitorSuperClassName="JetBrains.ReSharper.Plugins.FSharp.Psi.TreeNodeVisitorBase";
  "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
  "leafElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpLeafElement";
  "compositeElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree.FSharpCompositeElement";
  "psiElementVisitorClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.TreeNodeVisitor";
  "unexpectedTokenClassFQName"="Parsing.UnexpectedToken";
  "syntaxErrorClassFQName"="Parsing.SyntaxError";
  "parserGenRuntimePackageName"="Parsing";
  "createTokenElementMethodFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Factory.createTokenElement";
  "visitMethodPrefix"="Visit";
  "lexerClassName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.FSharpLexer";
  "psiClassesPrefix"="";
  "psiElementClassFQName"="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.IFSharpTreeNode";
  customImplPackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Impl.Tree";
  customInterfacePackage="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree";
  "interfaceNamePrefix"="I";
  "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";
  "customImplSuffix"="";
  "objectClassFQName"="System.Object";
  publicChildRolePrefix="FS_";
  tokenBitsetThreshold=4;
  elementTypeBaseClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Tree.FSharpCompositeNodeType";
  parserMessagesClass="JetBrains.ReSharper.Plugins.FSharp.Psi.Parsing.ParserMessages";
  generateWorkingPsi;
}



// Files

interface fSharpFile options { customParseFunction; noInternalParseFunction; }:
  fSharpImplFile |
  fSharpSigFile;

fSharpImplFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleOrNamespaceDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;

fSharpSigFile options { stubBase="FSharpFileBase"; }:
  topLevelModuleOrNamespaceDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>*;



// Modules and namespaces

interface fSharpDeclaration:
  moduleLikeDeclaration |
  moduleMemberDeclaration |
  fSharpTypeDeclaration;

interface moduleLikeDeclaration:
  topLevelModuleOrNamespaceDeclaration |
  nestedModuleDeclaration;

interface topLevelModuleOrNamespaceDeclaration:
  topLevelModuleDeclaration |
  fSharpNamespaceDeclaration |
  fSharpGlobalNamespaceDeclaration;

fSharpNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*;

fSharpGlobalNamespaceDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  longIdentifier<LONG_IDENTIFIER, LongIdentifier> // should be empty, needed here for common interface
  moduleMember<MODULE_MEMBER, Members>*
  fakeSeparator;

topLevelModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  moduleMember<MODULE_MEMBER, Members>*
  fakeSeparator;

moduleOrNamespaceSignature: fakeSeparator;



// Module members

interface moduleMember:
  moduleMemberDeclaration |
  moduleMemberStatement |
  memberDeclaration |
  hashDirective |
  otherModuleMember;

interface moduleMemberDeclaration:
  nestedModuleDeclaration |
  fSharpTypeDeclaration |
  let |
  moduleAbbreviation |
  otherMemberDeclaration;

interface moduleMemberStatement:
  openStatement |
  do;

let options { stubBase="DummyDeclaration"; }:
  // todo: add `let` `rec` keyword
  binding<BINDING, Bindings>*
  fakeSeparator;


interface binding:
  topBinding |
  localBinding;

topBinding:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  synPat<HEAD_PATTERN, HeadPattern>
  EQUALS
  synExpr<EXPR, Expression>
  fakeSeparator;

localBinding:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  synPat<HEAD_PATTERN, HeadPattern>
  EQUALS
  synExpr<EXPR, Expression>
  fakeSeparator;


interface synPat:
  namedPat |
  typedPat |
  orPat |
  andsPat |
  longIdentPat | // Used for functions, union cases, active patterns and `::` with wrong ranges order.
  listPat |      // We currently use it for tuples, lists and arrays.
  parenPat |
  recordPat |
  optionalValPat |
  isInstPat |
  consPat |
  wildPat |
  otherPat;

interface namedPat:
  topNamedPat |
  localNamedPat;

interface longIdentPat:
  topLongIdentPat |
  localLongIdentPat;

topNamedPat options { stubBase="TopPatternDeclarationBase"; }:
  synPat<PATTERN, Pattern>?
  identOrOpName{IDENTIFIER, Identifier};

topLongIdentPat options { stubBase="TopPatternDeclarationBase"; }:
  identOrOpName{IDENTIFIER, Identifier}
  fakeSeparator
  // todo: use longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  synPat<PARAMETER, Parameters>*
  fakeSeparator;

localNamedPat options { stubBase="LocalPatternDeclarationBase"; }:
  synPat<PATTERN, Pattern>?
  identOrOpName{IDENTIFIER, Identifier};

localLongIdentPat options { stubBase="LocalPatternDeclarationBase"; }:
  identOrOpName{IDENTIFIER, Identifier}
  // todo: use longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  synPat<PARAMETER, Parameters>*
  fakeSeparator;

typedPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN, Pattern>
  COLON
  synType;

orPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  BAR
  synPat<PATTERN2, Pattern2>;

andsPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  AMP
  synPat<PATTERN2, Pattern2>;

listPat options { stubBase="SynPatternBase"; }:
  synPat<ATTRIBUTE, Patterns>*;

parenPat options { stubBase="SynPatternBase"; }:
  LPAREN
  synPat<PATTERN, Pattern>
  RPAREN;

recordPat options { stubBase="SynPatternBase"; }:
  synPat<ATTRIBUTE, Patterns>*
  fakeSeparator;

optionalValPat options { stubBase="SynPatternBase"; }:
  QMARK
  synPat<PATTERN, Pattern>;

isInstPat options { stubBase="SynPatternBase"; }:
  COLON_QMARK
  fakeSeparator;

consPat options { stubBase="SynPatternBase"; }:
  synPat<PATTERN1, Pattern1>
  COLON_COLON
  synPat<PATTERN2, Pattern2>;

wildPat options { stubBase="SynPatternBase"; }:
  UNDERSCORE;

otherPat options { stubBase="SynPatternBase"; }:
  fakeSeparator;


interface synExpr:
  constExpr |
  tupleExpr |
  arrayOrListExpr |
  recordExpr |
  setExpr |
  typeTestExpr |
  castExpr |
  otherExpr;

interface setExpr:
  longIdentSetExpr |
  dotSetExpr;

interface castExpr:
  upcastExpr |
  downcastExpr;

constExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

tupleExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

arrayOrListExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;

recordExpr options { stubBase="DummyExpression"; }:
  (
    synExpr<COPY_INFO, CopyInfo>
    WITH
  )?
  recordExprBinding<BINDING, ExprBindings>*;


recordExprBinding:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  EQUALS
  synExpr<EXPR, Expression>
  SEMICOLON?;

longIdentSetExpr options { stubBase="DummyExpression"; }:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  LARROW<LARROW, LArrow>
  synExpr<EXPR, Expression>;

dotSetExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR1, LeftExpr>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  LARROW<LARROW, LArrow>
  synExpr<EXPR2, RightExpr>;


matchClause options { stubBase="DummyExpression"; }:
  fakeSeparator;

typeTestExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_QMARK
  synType<TYPE, Type>;

upcastExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_GREATER
  synType<TYPE, Type>;
  
downcastExpr options { stubBase="DummyExpression"; }:
  synExpr<EXPR, Expression>
  COLON_QMARK_GREATER
  synType<TYPE, Type>;

otherExpr options { stubBase="DummyExpression"; }:
  fakeSeparator;


interface fSharpTypeDeclaration:
  exceptionDeclaration |
  simpleTypeDeclaration |
  typeExtensionDeclaration |
  delegateDeclaration |
  objectModelTypeDeclaration |
  nestedTypeUnionCaseDeclaration;

interface simpleTypeDeclaration:
  enumDeclaration |
  recordDeclaration |
  unionDeclaration |
  notCompiledTypeDeclaration;

interface notCompiledTypeDeclaration:
  typeAbbreviationDeclaration |
  moduleAbbreviation |
  abstractTypeDeclaration |
  otherSimpleTypeDeclaration;

interface objectModelTypeDeclaration:
  classDeclaration |
  interfaceDeclaration |
  structDeclaration |
  objectTypeDeclaration;

nestedModuleDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  moduleMember<MODULE_MEMBER, Members>*;

typeExtensionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
   get { methodName="TypeParameters" path=<typeExtensionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
   get { methodName="TypeMembers" path=<typeExtensionDeclaration:TYPE_MEMBER> };
 }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  longIdentifier<IDENTIFIER, LongIdentifier>
  namedTypeExpression<EXTENDED_TYPE, ExtendedType>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

// Enums

enumDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<enumDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  enumMemberDeclaration<ENUM_MEMBER, EnumMembers>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

enumMemberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;



// Records

recordDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<recordDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  recordFieldDeclaration<RECORD_FIELD, Fields>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


recordFieldDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;



// Discriminated unions

unionCasesList:
  modifier{ACCESS_MODIFIER, Modifier}?
  unionCaseDeclaration<UNION_CASE, UnionCases>*;

unionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<unionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
  get { methodName="UnionCases" path=<unionDeclaration:UNION_CASES_LIST/unionCasesList:UNION_CASE> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  unionCasesList<UNION_CASES_LIST, UnionCasesList>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


interface unionCaseDeclaration:
  singletonCaseDeclaration |
  nestedTypeUnionCaseDeclaration;

singletonCaseDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>;

nestedTypeUnionCaseDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<nestedTypeUnionCaseDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  caseFieldDeclaration<UNION_FIELD, Fields>*
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


interface caseFieldDeclaration:
  unionCaseFieldDeclaration |
  exceptionFieldDeclaration;

unionCaseFieldDeclaration options { stubBase="UnionCaseFieldDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;

exceptionFieldDeclaration options { stubBase="UnionCaseFieldDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;


// Other members

exceptionDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<exceptionDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  caseFieldDeclaration<UNION_FIELD, Fields>*
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

typeAbbreviationDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<typeAbbreviationDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

moduleAbbreviation options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<moduleAbbreviation:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interface activePatternCase:
  activePatternCaseDeclaration |
  activePatternWildCase;

interface activePatternCaseDeclaration:
  topActivePatternCaseDeclaration |
  localActivePatternCaseDeclaration;

topActivePatternCaseDeclaration options { stubBase="FSharpDeclarationBase"; }:
   IDENTIFIER<IDENTIFIER, Identifier>;

localActivePatternCaseDeclaration options { stubBase="LocalDeclarationBase"; }:
  IDENTIFIER<IDENTIFIER, Identifier>;

activePatternWildCase:
  wildPat;


otherMemberDeclaration options { stubBase="DummyDeclaration"; }:
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>;

otherSimpleTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<otherSimpleTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

abstractTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;


// Object model type declarations

classDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<classDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interfaceDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<interfaceDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

structDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<structDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

objectTypeDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<objectTypeDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

delegateDeclaration options { stubBase="FSharpTypeElementDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<delegateDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfTypeList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  accessModifiers<ACCESS_MODIFIERS, AccessModifiers>
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfTypeList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>*;

interface fSharpTypeMemberDeclaration:
  implicitConstructorDeclaration |
  constructorDeclaration |
  typeInherit |
  interfaceImplementation |
  interfaceInherit |
  abstractSlot |
  memberDeclaration |
  typeLetBindings |
  valField |
  autoProperty |
  let |

  otherTypeMember;

interfaceInherit: namedTypeExpression<INTERFACE_TYPE, InterfaceType>;
typeInherit: namedTypeExpression<BASE_TYPE, BaseType>;

interfaceImplementation options { stubBase="FSharpDeclarationBase"; }:
  namedTypeExpression<INTERFACE_TYPE, InterfaceType>
  fSharpTypeMemberDeclaration<TYPE_MEMBER, TypeMembers>* fakeSeparator;


otherTypeMember: fakeSeparator;
typeLetBindings: fakeSeparator;

implicitConstructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  memberParam<PARAMETER, Parameters>* fakeSeparator;

constructorDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  localDeclaration<PARAMETER, Parameters>* fakeSeparator
  NEW<NEW, NewKeyword>;



// todo: fix properties with explicit setters

memberDeclaration options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<memberDeclaration:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  identOrOpName{IDENTIFIER, Identifier}
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

abstractSlot options { stubBase="FSharpProperTypeMemberDeclarationBase"; } extras {
  get { methodName="TypeParameters" path=<abstractSlot:TYPE_PARAMETERS_LIST/typeParameterOfMethodList:TYPE_PARAMETER> };
}:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>
  typeParameterOfMethodList<TYPE_PARAMETERS_LIST, TypeParameterList>?
  memberParam<PARAMETER, Parameters>* fakeSeparator;

valField options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

autoProperty options { stubBase="FSharpProperTypeMemberDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

memberParam:
  synPat<PATTERN, Pattern>;


// module statements

interface hashDirective:
  lineDirective |
  loadDirective |
  referenceDirective |
  iDirective |
  otherDirective;

lineDirective:
  PP_LINE<PP_LINE, HashToken>
  STRING<STRING, Args>*;

loadDirective:
  PP_LOAD<PP_LOAD, HashToken>
  STRING<STRING, Args>*;

referenceDirective:
  PP_REFERENCE<PP_REFERENCE, HashToken>
  STRING<STRING, Args>*;

iDirective:
  PP_I<PP_I, HashToken>
  STRING<STRING, Args>*;

otherDirective:
  PP_DIRECTIVE<PP_DIRECTIVE, HashToken>
  STRING<STRING, Args>*;

openStatement:
  OPEN<OPEN, Open>
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>;

do options { stubBase="DummyDeclaration"; }:
  fakeSeparator;

otherModuleMember: fakeSeparator;



// Identifiers

private identOrOpName{ROLE,Getter}:
  IDENTIFIER<@ROLE,@Getter> |
  SYMBOLIC_OP<@ROLE,@Getter> |
  activePatternId<@ROLE,@Getter>;

activePatternId:
  LPAREN<LPAREN, LParen>
  BAR
  (
    activePatternCase<ACTIVE_PATTERN_CASE, Cases>
    BAR
  )+
  RPAREN<RPAREN, RParen>;

longIdentifier: IDENTIFIER<IDENTIFIER, Identifiers>*;



// Type parameters

typeParameterOfTypeList:
  LESS<LESS,LAngle>
  typeParameterOfTypeDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeParameterOfMethodList:
  LESS<LESS,LAngle>
  typeParameterOfMethodDeclaration<TYPE_PARAMETER, TypeParameters>*
  GREATER<GREATER,RAngle>;

typeArgumentList:
  LESS<LESS,LAngle>
  GREATER<GREATER,RAngle>;

typeParameterOfTypeDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;

typeParameterOfMethodDeclaration options { stubBase="FSharpDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  IDENTIFIER<IDENTIFIER, Identifier>;


// Access modifiers

accessModifiers: modifier{ACCESS_MODIFIER, Modifiers}*;

private modifier{ROLE,Getter}:
  PUBLIC<@ROLE,@Getter> |
  PRIVATE<@ROLE,@Getter> |
  INTERNAL<@ROLE,@Getter>;



// Attributes

fSharpAttribute options { stubBase="DummyExpression"; }:
  longIdentifier<IDENTIFIER, LongIdentifier>
  argExpression<ARG_EXPRESSION, ArgExpression>
;

argExpression:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  STRING<STRING, String>;
// todo: cover more cases (this is a temp mock for the only case we actually look at it now)


fakeSeparator: FAKE;

// Local declarations

localDeclaration options { stubBase="LocalDeclarationBase"; }:
  fSharpAttribute<ATTRIBUTE, Attributes>*
  identOrOpName{IDENTIFIER, Identifier};


interface synType:
  namedTypeExpression |
  otherType;


namedTypeExpression:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier> fakeSeparator
  typeArgumentList?;

otherType:
  fakeSeparator;